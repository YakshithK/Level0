# Level0 MVP: HARDCORE 8-DAY EXECUTION PLAN
## June 19 (5PM) → June 27 EOD

> **MISSION**: Ship AI prompt-to-game builder. User types "lava platformer with spikes" → gets playable Phaser game + code. NO FLUFF. JUST SHIP.

---

## ⚡ DAILY ROUTINE (NON-NEGOTIABLE)
- **6-8 hours coding** (except today: 3-4 hours)
- **45-90 min targeted learning** (while coding, not separate)
- **30 min outreach** (DMs, replies, community posts)
- **10 min build in public** (progress post + engage)
- **ZERO time on**: extensive testing, polish, perfectionism

---

## 🗓️ EXECUTION SCHEDULE

### **June 19 (TODAY) - BOOTSTRAP** 
*3-4 hours | 5PM-9PM*

#### 🔨 CODE (Priority Order)
1. **Repo Setup** (30 min)
   - `git init level0-ai`
   - Next.js + Tailwind boilerplate
   - Deploy to Vercel immediately

2. **Basic UI** (90 min)
   - Prompt textarea
   - "Generate Game" button  
   - Empty iframe for game preview
   - Monaco editor placeholder

3. **Static Phaser Demo** (60 min)
   - Basic Phaser scene with colored rectangles
   - Player movement (WASD)
   - Show in iframe

#### 📚 LEARN (Built into coding time)
- Phaser 3 setup docs while coding
- Next.js iframe integration while building

#### 📢 BUILD IN PUBLIC (5 min)
**Tweet**: "Building Level0 - AI that turns text into playable games. 8 days to ship. Day 1 starts now 🎮⚡ #buildinpublic"

#### 💬 OUTREACH (15 min)
- Follow 20 indie hackers, AI builders, game devs
- Set up Twitter lists: "GameDev", "AI Builders", "Indie Hackers"

---

### **June 20 - GAME ENGINE CORE**
*6-8 hours*

#### 🔨 CODE (Priority Order)
1. **Player Physics** (2h)
   - Gravity + jump
   - Platform collision
   - Basic movement controls

2. **Dynamic Game Generation** (3h)
   - `generateGame(config)` function
   - Pass props to Phaser scene
   - Reset game between generations

3. **Code Display** (1h)
   - Show generated Phaser code in Monaco
   - Syntax highlighting

#### 📚 LEARN (Built into coding)
- Phaser Physics while implementing
- React-Phaser integration patterns

#### 📢 BUILD IN PUBLIC (10 min)
**Post**: GIF of working platformer + "Day 1: Physics ✅. Tomorrow: AI generates this"
**Engage**: Reply to 5 comments on yesterday's post

#### 💬 OUTREACH (30 min)
- DM 5 indie game devs: "Building AI game generator, would love your thoughts"
- Join 3 game dev Discord servers
- Comment on 5 relevant posts with valuable insights

#### 🎯 RESOURCES TO CONSUME
- [Phaser 3 Examples](https://phaser.io/examples) - Bookmark, reference while coding
- [React-Phaser Integration Guide](https://blog.ourcade.co/posts/2020/phaser-3-react-typescript/) - 15 min read

---

### **June 21 - AI BRAIN**
*6-8 hours*

#### 🔨 CODE (Priority Order)
1. **Game Schema** (1h)
   ```json
   {
     "theme": "lava|ice|forest|space",
     "playerAbilities": ["jump", "doubleJump", "dash"],
     "enemies": ["spike", "slime", "shooter"],
     "platforms": {"count": 5, "moving": false},
     "goal": "portal|survival|collectible"
   }
   ```

2. **OpenAI Integration** (4h)
   - Function calling setup
   - Prompt engineering for reliable JSON
   - Error handling + retry logic
   - Test 20+ prompts

3. **Config Processor** (2h)
   - Validate JSON output
   - Fill missing defaults
   - Convert to Phaser-ready format

#### 📚 LEARN (Built into coding)
- OpenAI Function Calling docs
- Few-shot prompting while testing

#### 📢 BUILD IN PUBLIC (10 min)  
**Post**: Screenshot: prompt → JSON config + "The AI gets it 🧠"
**Engage**: Share in 2 AI communities

#### 💬 OUTREACH (30 min)
- DM @OpenAI DevRel team with progress
- DM 5 AI tool builders
- Comment on OpenAI API discussions

#### 🎯 RESOURCES TO CONSUME
- [OpenAI Function Calling Guide](https://platform.openai.com/docs/guides/function-calling)
- [Few-Shot Prompting Examples](https://www.promptingguide.ai/techniques/fewshot)
- Watch: "Building with OpenAI API" - Fireship (8 min)

---

### **June 22 - CODE GENERATOR**
*6-8 hours*

#### 🔨 CODE (Priority Order)
1. **Modular Code Gen** (4h)
   - Template-based Phaser code generation
   - Inject abilities: `if (doubleJump) { /* code */ }`
   - Inject enemies: `spawnSlime()`, `spawnSpike()`
   - Theme variations (colors, backgrounds)

2. **Dynamic Execution** (2h)
   - Eval generated code safely in iframe
   - Handle execution errors gracefully
   - Reset between generations

3. **Code Preview** (1h)
   - Display in Monaco with formatting
   - Copy-to-clipboard button

#### 📚 LEARN (Built into coding)
- JavaScript eval security patterns
- Phaser Groups and Factories

#### 📢 BUILD IN PUBLIC (10 min)
**Post**: "Config → Code → Game pipeline working! 🔥" + screen recording
**Engage**: Tag @PhaserJS in the post

#### 💬 OUTREACH (30 min)
- DM Phaser community leaders
- Share in r/gamedev
- DM V0.dev team comparing approaches

#### 🎯 RESOURCES TO CONSUME
- [Safe JavaScript Eval Patterns](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval)
- [Phaser Groups Tutorial](https://phaser.io/tutorials/making-your-first-phaser-3-game/part9)
- Skim: V0.dev code generation patterns

---

### **June 23 - FULL PIPELINE**
*6-8 hours*

#### 🔨 CODE (Priority Order)
1. **End-to-End Flow** (3h)
   - Prompt → OpenAI → JSON → Code → Rendered Game
   - Loading states (simple spinner)
   - Generate/Regenerate buttons

2. **Game Rendering** (2h)
   - Inject code into iframe seamlessly  
   - Handle game lifecycle
   - Basic error messaging

3. **Core UX** (2h)
   - Smooth transitions
   - Prompt examples dropdown
   - Clear current game button

#### 📚 LEARN (Built into coding)
- Iframe sandboxing and communication
- Async/await error handling patterns

#### 📢 BUILD IN PUBLIC (10 min)
**Post**: Full demo video: "Type → Generate → Play in 10 seconds" 
**Engage**: Ask community: "What game would you generate first?"

#### 💬 OUTREACH (30 min)
- DM 10 people with working demo link
- Post in 3 relevant Discord servers
- Reply to comments with demo links

#### 🎯 RESOURCES TO CONSUME
- [Iframe Security Best Practices](https://web.dev/sandboxed-iframes/)
- Watch: "Dynamic Content Loading" - Web Dev Simplified (12 min)

---

### **June 24 - GAME COMPLEXITY**
*6-8 hours*

#### 🔨 CODE (Priority Order)
1. **Advanced Player Abilities** (3h)
   - Double jump mechanics
   - Dash/sprint system  
   - Wall jump (if time allows)

2. **Enemy Behaviors** (2h)
   - Moving platforms
   - Patrolling enemies
   - Simple shooting enemies

3. **Win Conditions** (2h)
   - Portal/exit mechanics
   - Collectible items
   - Timer-based challenges

#### 📚 LEARN (Built into coding)
- Phaser Tweens and advanced physics
- Game state management patterns

#### 📢 BUILD IN PUBLIC (10 min)
**Post**: "Now generating complex games with multiple mechanics 🎯" + examples
**Engage**: Share in indie game communities

#### 💬 OUTREACH (30 min)
- DM game streamers for potential demo
- Share with indie game dev communities
- Connect with Phaser plugin developers

#### 🎯 RESOURCES TO CONSUME
- [Phaser Tweens Documentation](https://newdocs.phaser.io/docs/3.80.0/Phaser.Tweens)
- [Advanced Phaser Physics](https://phaser.io/news/2018/09/phaser-matter-physics-tutorial)

---

### **June 25 - SHARING & PERSISTENCE**
*6-8 hours*

#### 🔨 CODE (Priority Order)
1. **URL Sharing** (3h)
   - Encode prompt in URL params
   - "Share this game" button
   - Social media meta tags

2. **Local Persistence** (2h)
   - Save last 5 prompts in localStorage
   - "Recent prompts" dropdown
   - Restore on page reload

3. **Prompt Gallery** (2h)
   - Curated example prompts
   - Categories: platformer, shooter, puzzle
   - "Try random prompt" button

#### 📚 LEARN (Built into coding)
- URL encoding/decoding
- localStorage best practices

#### 📢 BUILD IN PUBLIC (10 min)
**Post**: "Share your AI games with one click 🔗" + shareable examples
**Engage**: Ask followers to share their generated games

#### 💬 OUTREACH (30 min)
- DM 15 people with shareable demo links
- Ask for feedback on game examples
- Share in maker communities

#### 🎯 RESOURCES TO CONSUME
- [URL Search Params API](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)
- [localStorage Performance Tips](https://web.dev/storage-for-the-web/)

---

### **June 26 - LAUNCH PREP**
*6-8 hours*

#### 🔨 CODE (Priority Order)
1. **Stability** (2h)
   - Handle OpenAI API failures gracefully
   - Fallback game templates
   - Basic input validation

2. **Launch Assets** (3h)
   - Record 60-second demo video
   - Take high-quality screenshots
   - Write copy for social posts
   - Prepare launch sequence

3. **Performance** (2h)
   - Optimize bundle size
   - Cache generated code
   - Minimize API calls

#### 📚 LEARN (Built into prep)
- Product launch best practices
- Social media optimization

#### 📢 BUILD IN PUBLIC (15 min)
**Post**: "Launch day tomorrow! 8-day build journey recap 🧵" + progress thread
**Engage**: Build anticipation, ask for launch day support

#### 💬 OUTREACH (45 min)
- Pre-launch DM blast to entire network
- Prepare Product Hunt submission
- Schedule launch posts across platforms

#### 🎯 RESOURCES TO CONSUME
- [Product Hunt Launch Guide](https://blog.producthunt.com/how-to-launch-on-product-hunt-7c1843e06399)
- [Viral Launch Strategies](https://www.indiehackers.com/post/how-i-got-10-000-users-in-24-hours-4a9c0e6b4f)

---

### **June 27 - LAUNCH DAY**
*4-6 hours*

#### 🔨 FINAL PUSH (2h)
- Last-minute testing
- Deploy final version
- Set up analytics tracking

#### 📢 LAUNCH SEQUENCE (3h)
- **8AM**: Twitter announcement thread
- **9AM**: LinkedIn post with story
- **10AM**: Product Hunt submission
- **12PM**: Reddit r/gamedev, r/MachineLearning
- **2PM**: Discord communities (10+)
- **4PM**: Indie Hackers showcase
- **6PM**: Follow-up engagement

#### 💬 OUTREACH (All Day)
- Respond to every comment/mention
- DM personal network with launch news
- Engage with early users in real-time

---

## 🎯 COMPLETE RESOURCE ARSENAL

### 📚 LEARNING RESOURCES

#### **Phaser Development**
- [Phaser 3 Documentation](https://newdocs.phaser.io/)
- [Phaser Examples](https://phaser.io/examples) - Bookmark for reference
- [Ourcade Phaser Tutorials](https://blog.ourcade.co/) - Advanced patterns
- [Phaser Discord](https://discord.gg/phaser) - Community support

#### **AI Integration**
- [OpenAI API Documentation](https://platform.openai.com/docs)
- [Function Calling Guide](https://platform.openai.com/docs/guides/function-calling)
- [Prompt Engineering Guide](https://www.promptingguide.ai/)
- [LangChain Expression Language](https://python.langchain.com/docs/expression_language/) - Advanced prompting

#### **Code Generation & Dynamic Execution**
- [MDN eval() Security](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval)
- [Safe Code Execution Patterns](https://blog.risingstack.com/writing-a-javascript-framework-sandboxed-code-evaluation/)
- [Iframe Sandboxing](https://web.dev/sandboxed-iframes/)
- [Blob URLs for Dynamic Content](https://developer.mozilla.org/en-US/docs/Web/API/Blob)

#### **React & Next.js**
- [Next.js Documentation](https://nextjs.org/docs)
- [React Patterns](https://reactpatterns.com/) - Best practices
- [Tailwind CSS Documentation](https://tailwindcss.com/docs)
- [Monaco Editor Integration](https://microsoft.github.io/monaco-editor/)

### 🎥 VIDEO CONTENT (Watch While Coding)

#### **Day 20 (Phaser Basics)**
- [Fireship: Phaser in 100 Seconds](https://www.youtube.com/watch?v=frRWKxB9Hm0)
- [Zenva: Phaser 3 Platformer](https://www.youtube.com/watch?v=7cpZ6k7JPE0) (30 min)

#### **Day 21 (AI Integration)**
- [OpenAI DevDay Highlights](https://www.youtube.com/watch?v=U9mJuUkhUzk) (20 min)
- [Building with GPT-4 Function Calling](https://www.youtube.com/watch?v=0lOSvOoF2to)

#### **Day 22 (Code Generation)**
- [Dynamic JavaScript Execution](https://www.youtube.com/watch?v=J


Got it! Here’s a revised plan starting **June 23** that reflects where you are now — you have live editing working with config-based games but want to shift toward a more flexible system where the AI generates actual Phaser scene code from prompts.

---

# Level0 MVP: HARDCORE 5-DAY EXECUTION PLAN

## June 23 (Today) → June 27 EOD

> **MISSION**: Ship AI prompt-to-playable-game builder where the AI generates *actual Phaser scene code* directly from the prompt — no rigid configs. Break the borders of imagination. NO FLUFF. JUST SHIP.

---

## ⚡ DAILY ROUTINE (NON-NEGOTIABLE)

* **6-8 hours coding**
* **45-90 min targeted learning** (while coding)
* **30 min outreach** (DMs, replies, community posts)
* **10 min build in public** (progress post + engage)
* **ZERO time on**: extensive testing, polish, perfectionism

---

## 🗓️ EXECUTION SCHEDULE

### **June 23 - FULL PIPELINE + AI-CODE INJECTION**

*6-8 hours*

#### 🔨 CODE (Priority Order)

1. **End-to-End Flow (Prompt → Scene Code → Playable Game)**

   * Integrate AI prompt-to-full Phaser Scene class code generation
   * Replace config-driven code with AI-generated scene class code injection
   * Display generated code live in Monaco editor
   * Dynamically eval & run generated code in iframe

2. **Improve Error Handling & Sandbox Execution**

   * Catch and display runtime errors gracefully
   * Secure dynamic code execution sandbox (iframe + blob URLs)
   * Reset game instance cleanly on regenerate

3. **UX Improvements**

   * Prompt examples dropdown
   * Clear/reset prompt and code button
   * Loading spinner while waiting for AI response

#### 📚 LEARN (Built into coding)

* Advanced eval() sandboxing techniques
* Safe dynamic code execution
* Prompt engineering for reliable Phaser scene code generation

#### 📢 BUILD IN PUBLIC (10 min)

* Post demo video/GIF: “Day 1 of code-gen mode — AI generates full playable Phaser scene code from any prompt 🎮🔥 #buildinpublic”

#### 💬 OUTREACH (30 min)

* DM Phaser and AI developer communities with live demo
* Engage on Twitter with relevant hashtags & tags
* Post in Discord game dev channels

---

### **June 24 - PROMPT ENGINEERING + CODE QUALITY**

*6-8 hours*

#### 🔨 CODE (Priority Order)

1. **Prompt Engineering**

   * Refine prompt templates for stable and clean Phaser Scene output
   * Add few-shot examples for better AI understanding
   * Experiment with different temperature and model params

2. **Code Sanitization & Formatting**

   * Auto-format AI-generated code in Monaco
   * Remove unsafe code patterns automatically
   * Add helper code snippets to standardize scene setup

3. **Performance & Responsiveness**

   * Improve iframe reload speed
   * Cache recent prompt + code to reduce API calls

#### 📚 LEARN (Built into coding)

* Few-shot prompting best practices
* Prettier or other JS formatter integration
* Advanced React iframe and state sync

#### 📢 BUILD IN PUBLIC (10 min)

* Post: “Dialed in prompt templates — AI now writes clean Phaser scene code on demand 🎯 #gamedev #AI”

#### 💬 OUTREACH (30 min)

* Reach out to AI prompt engineering experts for feedback
* Share prompt examples on Twitter
* Ask followers: “What’s the wildest game prompt you want to see?”

---

### **June 25 - GAME MECHANICS & DIVERSITY**

*6-8 hours*

#### 🔨 CODE (Priority Order)

1. **Advanced Mechanics**

   * Add support for common platformer mechanics via AI code generation:

     * Double jump, dash, moving platforms, enemies
   * Use prompt hints to toggle these mechanics on/off

2. **Theme Variations & Visuals**

   * AI-generated code to handle different themes (lava, ice, forest)
   * Simple background and sprite placeholders injected dynamically

3. **Test Complex Prompts**

   * Generate multi-mechanic games from complex prompts
   * Fix breaking cases

#### 📚 LEARN (Built into coding)

* Phaser advanced features (tweens, physics)
* Dynamic asset loading basics

#### 📢 BUILD IN PUBLIC (10 min)

* Post clips of varied games generated live from prompts
* Poll: “Which mechanic should we add next?”

#### 💬 OUTREACH (30 min)

* DM indie devs & streamers for feedback/demo
* Post in game dev and AI forums

---

### **June 26 - SHARING, PERSISTENCE & STABILITY**

*6-8 hours*

#### 🔨 CODE (Priority Order)

1. **Sharing Features**

   * Encode prompts + code in URL params for sharing
   * “Share game” button with social preview tags

2. **Persistence**

   * Store recent prompts and generated code in localStorage
   * “Load recent” dropdown

3. **Error Recovery & Fallbacks**

   * Graceful fallback to simple game if code errors
   * Input validation and sanitation

#### 📚 LEARN (Built into coding)

* URL encoding & social meta tags
* localStorage APIs and performance

#### 📢 BUILD IN PUBLIC (10 min)

* Post: “Share your AI-built games with one click! 🔗 #buildinpublic”

#### 💬 OUTREACH (30 min)

* DM friends & followers with sharing demo
* Gather feedback on sharing UX

---

### **June 27 - FINAL LAUNCH DAY**

*4-6 hours*

#### 🔨 FINAL PUSH (2h)

* Final bug fixes & polish
* Analytics integration
* Deploy production build

#### 📢 LAUNCH SEQUENCE (3h)

* 8AM: Twitter thread launch + pinned post
* 9AM: LinkedIn post with story
* 10AM: Product Hunt submission
* 12PM: Reddit r/gamedev + r/machinelearning launch posts
* 2PM: Discord community blasts
* 4PM: Indie Hackers showcase
* 6PM: Engage & reply to all comments

#### 💬 OUTREACH (All Day)

* DM personal network launch news
* Engage with early users live
* Collect launch feedback

---

### NOTES

* The goal now is **AI generating actual Phaser Scene class code live** — no pre-built configs limiting creativity.
* Focus on safe, fast dynamic code injection + clean prompt engineering for robust results.
* Keep sharing daily progress publicly, gather feedback fast, and iterate.

---

If you want, I can help you draft system prompts for the AI to generate Phaser scene code or help rework your frontend pipeline for this. Just ask!
